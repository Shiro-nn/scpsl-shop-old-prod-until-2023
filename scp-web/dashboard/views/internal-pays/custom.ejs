<!DOCTYPE html>
<html style="background-color: #0c0d13;">
<head>
<title>fydne // Оплата</title>
<link rel="stylesheet" href="<%=cdn_host%>/scpsl/fonts/Nunito/style.css">
<link rel="stylesheet" href="<%=cdn_host%>/scpsl/fonts/neons/style.css">
<style>
html {
    scroll-behavior: smooth;
    scrollbar-gutter: stable;
}
* {
    scrollbar-color: #e66465 transparent;
    scrollbar-width: thin;
}
::selection {
    color: #e66465;
    background: #00000040;
}
body {
    display: flex;
    flex-direction: column;

    word-break: break-word;
    overflow-x: hidden;
    
    margin: 0;
    padding: 0;

    font-family: 'Nunito', sans-serif;
}

header {
    height: clamp(3.25rem, 1.75rem + 1.875vw, 4rem);
    max-width: clamp(60rem, 40rem + 25vw, 70rem);

    padding-inline: clamp(1.75rem, 1.25rem + .625vw, 2rem);
    margin-block-start: clamp(1.125rem, .875rem + .3125vw, 1.25rem);
    
    gap: clamp(.875rem, .625rem + .3125vw, 1rem);

    display: flex;
    flex-direction: row;
    align-items: center;
    grid-column: full-width;
    justify-content: space-between;

    position: fixed;
    z-index: 666;
    top: 0;
    left: 50%;
    transform: translateX(-50%);

    background: rgb(12 13 19 / .25);
    background: linear-gradient(42deg, rgb(0 0 0 / 20%), rgb(0 0 0 / 40%));
    backdrop-filter: blur(12px);
    /* box-shadow: 0 10px 30px 0 rgba(30, 42, 68, 0.4); */
    border: 1px solid #e66465;
    box-shadow: 0 0 13px 0 #e66465;
    
    width: min(100%, 90vw);
    border-radius: 9999px;
}
header *:focus {
    outline: 2px solid #e66465;
    outline-offset: 2px;
}

header a.logo {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: clamp(.4375rem, .3125rem + .1563vw, .5rem);

    padding: 5px;
    font-family: 'NeonOL';
    font-size: 32px;
    line-height: 35px;
    text-align: center;
    user-select: none;

    background-color: #ce54f3;
    background-image: linear-gradient(155deg, #ff2323, #d445ff);
    background-size: 100%;
    background-repeat: repeat;
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;
    background-clip: text;

    flex-shrink: 0;
    border-radius: clamp(.875rem, .625rem + .3125vw, 1rem);

    color: aliceblue;
    text-decoration: unset;
    transition: color .15s ease, background-color .15s ease;
}

header .panels {
    display: flex;
}
header .panels a {
    color: aliceblue;
    text-decoration: none;
    border-radius: 8px;
    
    margin: 0 5px;
    padding: 5px;
    font-family: 'Nunito';
    font-size: 22px;
    line-height: 35px;
    text-align: center;
    user-select: none;
}

@media screen and (max-width: 1279px) {
    body {
        --content-min-width: 43rem;
        --content-max-width: 100%;
        --content-current-width: 13.75rem + 60.9375vw;
        --breakout-max-width: 72.5rem;
    }
}
@media screen and (max-width: 1023px) {
    header {
        grid-column: content;
        padding-inline: clamp(1.25rem, 1.1364rem + .5682vw, 1.5rem);
    }
}
@media screen and (max-width: 767px) {
    body {
        --base-padding-inline: clamp(.5rem, -.2143rem + 3.5714vw, 1.5rem);
        --fluid-content-width: calc(100% - 2* var(--base-padding-inline));
        --breakout-column: 0px;
        
        padding-bottom: 4rem;
    }
    header {
        gap: clamp(.625rem, .375rem + .3125vw, .75rem);
        justify-content: space-between;
        padding-inline: clamp(.625rem, .375rem + .3125vw, .75rem);
        margin-block-start: clamp(.4375rem, .3125rem + .1563vw, .5rem);
    }
}

background {
    display: flex;
    flex-direction: column-reverse;
    position: fixed;
    
    width: 100%;
    height: clamp(20vh, 700px, 90vh);

    /*background-image: linear-gradient(#e66465, #9198e5);*/
    background-image: linear-gradient(42deg, rgba(48, 236, 195, 0.1) 0%, rgba(231, 219, 50, 0.1) 25%, rgba(238, 45, 158, 0.1) 50%, rgba(175, 43, 236, 0.1) 75%, rgba(37, 109, 243, 0.1) 100%);

    user-select: none;
    pointer-events: none;
}
background hider {
    display: flex;
    
    width: 100vw;
    height: 10%;

    background: linear-gradient(to bottom, #0000, #0c0d13 100%);
    backdrop-filter: blur(12px);

    user-select: none;
    pointer-events: none;
}


/*
.payCard {
    display: flex;
    width: min(500px, 90vw);
    
    position: absolute;
    left: 50%; top: 40%;
    transform: translateX(-50%) translateY(-50%);
}
*/
.payCard {
    display: flex;
    justify-content: space-between;
    position: relative;

    border-radius: 36px;
    max-width: 1200px;
    margin: 0 auto;
    padding: 3em;
    padding-top: 5em;
    margin-top: max(100px, 6em);
    box-shadow: 0px 4px 14px 2px rgba(0, 0, 0, 0.1);
    
    background: #15172170;
    border: 1px solid #151721;
    backdrop-filter: blur(6px);
}
.payCard .form {
    min-width: 555px;
}

.payCard .form .head {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    flex-direction: initial;
    margin-bottom: 5em;
}
.payCard .form .head info {
    display: flex;
    flex-direction: column;
    margin-right: 10px;
}
.payCard .form .head info h1 {
    font-size: 1.75em;
    font-weight: 800;
    color: #e66465;
    margin: 0;
}
.payCard .form .head info span {
    color: grey;
    font-size: 16px;
    font-weight: 500;
}
.payCard .form .head .timer {
    font-size: 1.35em;
    font-weight: 500;
    user-select: none;
}
.payCard .form .head .timer .box {
    background-color: #471a1a;
    color: aliceblue;
    height: 1.9em;
    width: 1.3em;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    border-radius: 4px;
    margin-left: -4px;
}
.payCard .form .head .timer .divider {
    position: relative;
    right: 2px;
    color: aliceblue;
}

.payCard .form section .group {
    margin-bottom: 2em;
}
.payCard .form section .group:not(:first-of-type) {
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-direction: initial;
}
.payCard .form section .group .areaBlock {
    max-width: 150px;
}
.payCard .form section .group h2 {
    text-transform: capitalize;
    font-size: 1.1em;
    font-weight: 700;
    color: #e66465;
    margin-bottom: 0.4em;
    margin-bottom: 0;
}
.payCard .form section .group p.desc {
    font-size: 0.77em;
    font-weight: 500;
    color: #8e96a3;
    margin-top: 0;
}
.payCard .form section .group .main {
    display: flex;
    position: relative;
    margin-top: 0;
}
.payCard .form section .group:first-of-type .main {
    margin-top: 1em;
}
.payCard .form section .group .main img.card-icon {
    position: absolute;
    height: 2em;
    top: 50%;
    left: 1.2em;
    transform: translate(0, -50%);
    pointer-events: none;
    user-select: none;
    max-width: 46px;
}
.payCard .form section .group .main img.trailing-icon {
    position: absolute;
    height: 1.5em;
    top: 50%;
    transform: translate(0, -50%);
    right: 1.5em;
    opacity: 0.35;
    pointer-events: none;
    user-select: none;
}
.payCard .form section .group .main input {
    border: 2px solid rgba(66, 66, 66, 0.5);
    width: 100%;
    padding: 1em 4em;
    font-size: 1.2em;
    font-weight: 600;
    border-radius: 6px;
    background: linear-gradient(45deg, #414244, transparent);
    color: #e66465;
    text-align: center;
}
.payCard .form section .group:not(:first-of-type) .main input {
    padding-right: 0;
    padding-left: 0;
    text-align: center;
    background: none;
}
.payCard .form section .group .grp {
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-direction: initial;
    width: 400px;
    position: relative;
    margin-left: 15px;
}
.payCard .form section .group .grp .main {
    width: 42%;
}
.payCard .form section .group .grp .divider {
    display: block;
    font-size: 1.5em;
    font-weight: 500;
    color: #e66465;
    position: absolute;
    left: 50%;
    transform: translate(-50%, 0);
}
.payCard .form section button {
    background: linear-gradient(155deg, #ff2323, #d445ff);
    width: 100%;
    padding: 1.2em 0;
    margin-top: 0.75em;
    box-sizing: border-box;
    color: aliceblue;
    text-transform: capitalize;
    font-size: 1.2em;
    font-weight: 500;
    border-radius: 0.6em;
    transition: all 250ms ease-in-out;
    cursor: pointer;
    user-select: none;
}

.payCard .form section button.progress {
    background-color: gray;
    cursor: wait;
    background-image: -webkit-gradient( linear,left top,right bottom,color-stop(0,gray),color-stop(0.6,gray),color-stop(0.65,#afafaf),color-stop(0.67,gray),color-stop(1,gray),color-stop(2,gray) );
    background-image: gradient( linear,left top,right bottom,color-stop(0,gray),color-stop(0.6,gray),color-stop(0.65,#afafaf),color-stop(0.67,gray),color-stop(1,gray),color-stop(2,gray) );
    animation: animatedBackgroundGrey 60s linear infinite;
}
@keyframes animatedBackgroundGrey {
    0% {
        background-position: 0
    }

    100% {
        background-position: 5000px
    }
}


/*
.payCard .form {
    padding-right: 3em;
}
.payCard .checkout {
    position: relative;
    height: 100%;
    width: 90%;
    float: right;
}
.payCard .checkout .for_blure {
    display: block;
    height: 1.5em;
    width: 5em;
    background-color: #e66465;
    position: absolute;
    top: -7px;
    left: 50%;
    transform: translate(-50%, 0);
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
}
.payCard .checkout .bankCard {
    width: 13em;
    height: 20em;
    background: linear-gradient(180deg, rgba(255, 255, 255, 0.6), #fff);
    backdrop-filter: blur(15px);
    padding: 2em;
    border-radius: 1em;
    box-shadow: 0px 4px 14px 2px rgba(224, 224, 224, 0.6);
    position: relative;
    z-index: 99;
    left: 50%;
    transform: translate(-50%, 0);
    overflow: hidden;
}
.payCard .checkout .bankCard .head {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-direction: initial;
    margin-bottom: 8em;
}
*/





.waiting {
    margin: auto;
}

.waiting .loader {
    margin: auto;
    border-radius: 32px;
    position: relative;
    width: 300px;
    height: 10px;
    background: #00000000;
    -webkit-box-reflect: below 1px linear-gradient(transparent, #0005);
}

.waiting .loader::before {
    border-radius: 32px;
    position: absolute;
    content: '';
    inset: 0;
    background: linear-gradient(90deg, #fb0094, #00f, #0f0, #ff0, #fb0094, #00f, #0f0, #ff0, #fb0094);
    animation: animate 20s linear infinite;
    background-size: 500%;
}

.waiting .loader::after {
    border-radius: 32px;
    position: absolute;
    content: '';
    inset: 0;
    background: linear-gradient(90deg, #fb0094, #00f, #0f0, #ff0, #fb0094, #00f, #0f0, #ff0, #fb0094);
    animation: animate 20s linear infinite;
    background-size: 500%;
    filter: blur(20px);
}

@keyframes animate {
    from{
        background-position: 500% 0;
    }
    to{
        background-position: 0 0;
    }
}

.waiting h1 {
    margin-top: 30px;
    color: antiquewhite;
    background-color: #ce54f3;
    background-image: linear-gradient(155deg, #ff2323, #d445ff);
    background-size: 100%;
    background-repeat: repeat;
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;
    background-clip: text;
    text-align: center;
}

.waiting span {
    margin: auto;
    display: flex;
    justify-content: center;
    color: aliceblue;
}



.card3ds {
    position: fixed;
    z-index: 3;
    top: 0; left: 0;
    height: 100vh;
    width: 100vw;
    backdrop-filter: blur(15px);
    animation: blur-in 1s forwards;
    display: flex;
    justify-content: center;
    align-items: center;
}
@keyframes blur-in {
    from {
        backdrop-filter: blur(0px);
    }
    to {
        backdrop-filter: blur(15px);
    }
}

.card3ds .panel {
    outline: 0;
    border: 1px solid #e66465;
    box-shadow: 0 0 13px 0 #e66465;
    border-radius: 24px;
    width: 400px;
    height: 500px;
    animation: panelAnim 1s forwards;
}
@keyframes panelAnim {
    from {
        width: 0px;
        height: 0px;
    }
    to {
        width: 400px;
        height: 500px;
    }
}
</style>
</head>
<body>
    <header>
        <a href="/" class="logo">fydne</a>
        <div class="panels">
            <a href="/profile">Профиль</a>
            <a href="/donate">Донат</a>
        </div>
    </header>

    <background><hider></hider></background>

    <div class="card3ds" style="display: none;">
        <iframe credentialless class="panel" name="form3ds" onload="console.log('iframe loaded');"></iframe>
    </div>

    <div class="payCard">
        <div class="form">
            <div class="head">
                <info>
                    <h1>Пополнение баланса</h1>
                    <span>Метод: Карты</span>
                </info>
                <div class="timer">
                    <span class="box" id="min-1">0</span>
                    <span class="box" id="min-2">0</span>
                    <span class="divider">:</span>
                    <span class="box" id="sec-1">0</span>
                    <span class="box" id="sec-2">0</span>
                </div>
            </div>
            <section class="messageLog" style="display: none;">
                <div class="waiting">
                    <div class="loader"></div>
                    <h1></h1>
                    <span></span>
                </div>
            </section>
            <section class="cardData">
                <div class="group">
                    <div>
                        <h2>Номер карты</h2>
                        <p class="desc">Введите 16-и значный номер карты</p>
                    </div>
                    <div class="main">
                        <img src="" class="card-icon">
                        <input type="text" id="cardNumber" placeholder="2200&emsp;-&emsp;7054&emsp;-&emsp;6661&emsp;-&emsp;4444" autocomplete="off">
                    </div>
                </div>

                <div class="group">
                    <div class="areaBlock">
                        <h2>Дата истечения</h2>
                        <p class="desc">Введите дату истечения действия карты</p>
                    </div>
                    <div class="grp">
                        <div class="main expires">
                            <input type="text" id="expiresMnth" placeholder="01" autocomplete="off">
                        </div>
                        <span class="divider">/</span>
                        <div class="main expires">
                            <input type="text" id="expiresYear" placeholder="34" autocomplete="off">
                        </div>
                    </div>
                </div>
                
                <div class="group">
                    <div class="areaBlock">
                        <h2>CVC код</h2>
                        <p class="desc">Введите CVC с обратной стороны карты</p>
                    </div>
                    <div class="main" style="width: 400px;">
                        <input type="password" id="cvc" placeholder="666" style="user-select: none !important;" autocomplete="off">
                        <img src="/bin/card-pay/dots.svg" alt="" class="trailing-icon">
                    </div>
                </div>

                <button>Оплатить</button>
            </section>
        </div>

        <!--<div class="checkout">
            <span class="for_blure"></span>
            <div class="bankCard">
                <div class="head">

                </div>
            </div>
        </div>-->
    </div>
<script>
let paid = false;

window.onmessage = function(event){
    let json = null;
    try { json = JSON.parse(event.data); } catch { }

    if (!json) {
        return;
    }
    
    console.log(json);

    if (json.action == 'payError') {
        const card3ds = document.querySelector('.card3ds');
        card3ds.style.display = 'none';

        const iframe = card3ds.querySelector('iframe');
        iframe.src = '';

        const cardData = document.querySelector('.cardData');
        const messageLog = document.querySelector('.messageLog');
        
        cardData.style.display = 'none';
        messageLog.style.display = '';
        
        const title = messageLog.querySelector('h1');
        const desc = messageLog.querySelector('span');
        
        title.innerHTML = 'Произошла ошибка при оплате';
        desc.innerHTML = json.action_params.descr + ' (' + json.action_params.code + ')';

        return;
    }

    if (json.action == 'paySuccess') {
        paid = true;

        const card3ds = document.querySelector('.card3ds');
        card3ds.style.display = 'none';

        const iframe = card3ds.querySelector('iframe');
        iframe.src = '';

        const cardData = document.querySelector('.cardData');
        const messageLog = document.querySelector('.messageLog');
        
        cardData.style.display = 'none';
        messageLog.style.display = '';
        
        const title = messageLog.querySelector('h1');
        const desc = messageLog.querySelector('span');
        
        title.innerHTML = 'Счет успешно оплачен';
        desc.innerHTML = 'Средства на баланс будут зачислены в течение одной минуты';

        return;
    }
};
window.addEventListener('load', () => {
    let isAmericanExpress = false;

    const CvcElement = document.getElementById('cvc');
    const NumElement = document.getElementById('cardNumber');
    const ExpMnth = document.getElementById('expiresMnth');
    const ExpYear = document.getElementById('expiresYear');

    const CardIcon = document.querySelector('.card-icon');
    const Button = document.querySelector('button');


    CvcElement.addEventListener('mousedown', () => {
        CvcElement.type = 'text';
        NumElement.type = 'password';
    });
    CvcElement.addEventListener('mouseleave', () => {
        CvcElement.type = 'password';
        NumElement.type = 'text';
    });
    CvcElement.addEventListener('input', (ev) => {
        ev.target.value = ev.target.value.replace(/[^0-9]/g, '').slice(0, isAmericanExpress ? 4 : 3);
    });


    NumElement.addEventListener('input', (ev) => {
        ev.target.value = ev.target.value.replace(/[^0-9]/g, '').slice(0, 16);

        const cardNum = ev.target.value;
        let new_value = '';
        for (let i = 0; i < ev.target.value.length; i += 4) {
            new_value += ev.target.value.slice(i, i + 4);

            if (ev.target.value.length > i + 4) {
                new_value += ' - ';
            }
        }

        ev.target.value = new_value;

        if (cardNum.startsWith('220')) {
            CardIcon.src = '/bin/card-pay/mir.svg';
        } else if (cardNum.startsWith('62')) {
            CardIcon.src = '/bin/card-pay/unionpay.png';
        } else if (cardNum.startsWith('6')) {
            CardIcon.src = '/bin/card-pay/discover.png';
        } else if (cardNum.startsWith('34') 
        || cardNum.startsWith('35') 
        || cardNum.startsWith('36') 
        || cardNum.startsWith('37')) {
            CardIcon.src = '/bin/card-pay/american-express.png';
        } else if (cardNum.startsWith('51') 
        || cardNum.startsWith('52') 
        || cardNum.startsWith('53') 
        || cardNum.startsWith('54')
        || cardNum.startsWith('55')) {
            CardIcon.src = '/bin/card-pay/mc_symbol.svg';
        } else if (cardNum.startsWith('4')) {
            CardIcon.src = '/bin/card-pay/visa.png';
        } else {
            CardIcon.src = '';
        }
        
        if (cardNum.length == 16) {
            ExpMnth.focus();
            return;
        }
    });
    

    ExpMnth.addEventListener('input', (ev) => {
        ev.target.value = ev.target.value.replace(/[^0-9]/g, '').slice(0, 2);

        if (ev.target.value.length == 0) {
            return;
        }

        const parsed = parseInt(ev.target.value);

        if (parsed > 12) {
            ev.target.value = '12';
            return;
        }
        
        if (ev.target.value.length == 2) {
            ExpYear.focus();
            return;
        }
    });

    ExpYear.addEventListener('input', (ev) => {
        ev.target.value = ev.target.value.replace(/[^0-9]/g, '').slice(0, 2);

        if (ev.target.value.length < 2) {
            return;
        }

        const parsed = parseInt(ev.target.value);

        if (parsed < 24) {
            ev.target.value = '24';
            return;
        }
        
        if (ev.target.value.length == 2) {
            CvcElement.focus();
            return;
        }
    });

    Button.addEventListener('click', async() => {
        const cardNum = NumElement.value.replace(/[^0-9]/g, '');

        if (cardNum.length < 16) {
            alert('Укажите номер карты');
            return;
        }

        if (ExpMnth.value.length < 2) {
            alert('Укажите месяц истечения карты');
            return;
        }
        if (ExpYear.value.length < 2) {
            alert('Укажите год истечения карты');
            return;
        }
        
        if (CvcElement.value.length < 3) {
            alert('Укажите CVC/CVV карты');
            return;
        }

        if (Button.classList.contains('progress')) {
            return;
        }

        Button.classList.add('progress');

        const timeout = setTimeout(() => {
            if (!Button.classList.contains('progress')) {
                return;
            }

            Button.classList.remove('progress');
            alert('Не удалось выполнить запрос, попробуйте резервные способы оплаты или попробуйте снова');
        }, 35000);

        // надо будет переписать и спрятать
        const CvcSend = CryptoJS.AES.encrypt(CvcElement.value, cardNum).toString();

        const resp = await fetch(window.location.href, {
            method: 'post',
			headers: {
				'Content-Type': 'application/json',
			},
            keepalive: true,
			body: JSON.stringify({
                num: cardNum,
                cvc: CvcSend,
                expires: {
                    month: ExpMnth.value,
                    year: ExpYear.value
                }
            }),
        });

        const json = await resp.json();
        
        try { Unprogress(); } catch { }

        console.log(json)

        if (json.status == 'OK_FINISH' || json.status == 'success') {
            const card3ds = document.querySelector('.card3ds');
            const iframe = card3ds.querySelector('iframe');

            card3ds.style.display = '';

            if (json.statusCheck) {
                let progressCount = 0;
                const interval = setInterval(async() => {
                    const statusResp = await fetch('/api/card-pay/' + json.statusCheck + '/check', {method:'post'});
                    const statusCheck = await statusResp.json();
                    if (statusCheck.status == 'progress') {
                        if (progressCount > 10) {
                            card3ds.style.display = 'none';
                            iframe.src = '';
                            clearInterval(interval);
                            alert('Кажется, вы отменили платеж. Попробуйте снова.');
                        }
                        progressCount++;
                        if (!iframe.src.endsWith('/api/card-pay/waiting')) {
                            iframe.src = '/api/card-pay/waiting';
                        }
                    }
                    else if (statusCheck.status == 'success') {
                        window.postMessage('{"type": "billing", "action": "paySuccess"}', '*');
                        clearInterval(interval);
                    }
                }, 1000);
            }

            if (json.redirect.isPost) {
                const form = document.createElement('form');
                form.style.display = 'none';
                form.method = 'POST';
                form.action = json.redirect.url;
                form.target = 'form3ds';
                document.body.appendChild(form);
                
                for (var key in json.redirect.data) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = key;
                    input.value = json.redirect.data[key];
                    form.appendChild(input);
                }
                
                const submit = document.createElement('input');
                submit.type = 'submit';
                form.appendChild(submit);
                submit.click();
                return;
            }

            iframe.src = json.redirect.url;
            return;
        }

        if (json.error) {
            console.log(json.error);

            const cardData = document.querySelector('.cardData');
            const messageLog = document.querySelector('.messageLog');

            cardData.style.display = 'none';
            messageLog.style.display = '';

            const title = messageLog.querySelector('h1');
            const desc = messageLog.querySelector('span');

            title.innerHTML = 'Произошла ошибка при оплате';
            desc.innerHTML = json.message ?? (json.error.descr + ' (' + (json.error.transaction_status ?? json.error.code) + ')'); 
        }


        function Unprogress() {
            clearTimeout(timeout);
            Button.classList.remove('progress');
        }
    });
});
</script>

<script>
const expiresTime = parseInt('<%= expires %>');
const elements = {
    min1: document.getElementById('min-1'),
    min2: document.getElementById('min-2'),
    sec1: document.getElementById('sec-1'),
    sec2: document.getElementById('sec-2'),
}

setInterval(() => UpdateExpires(), 1000);
UpdateExpires();

function UpdateExpires() {
    const diff_ms = expiresTime - Date.now();
    const diff = new Date(diff_ms < 0 ? 0 : diff_ms);

    const diff_mins = toDoubleString(diff.getMinutes());
    const diff_secs = toDoubleString(diff.getSeconds());

    elements.min1.innerHTML = diff_mins[0];
    elements.min2.innerHTML = diff_mins[1];

    elements.sec1.innerHTML = diff_secs[0];
    elements.sec2.innerHTML = diff_secs[1];

    if (diff_ms < 0 && !paid) {
        const card3ds = document.querySelector('.card3ds');
        card3ds.style.display = 'none';

        const iframe = card3ds.querySelector('iframe');
        iframe.src = '';

        const cardData = document.querySelector('.cardData');
        const messageLog = document.querySelector('.messageLog');
        
        cardData.style.display = 'none';
        messageLog.style.display = '';
        
        const title = messageLog.querySelector('h1');
        const desc = messageLog.querySelector('span');
        
        title.innerHTML = 'Время вышло';
        desc.innerHTML = 'Истек срок на оплату';
    }
}

function toDoubleString(number) {
    let str = number.toString();

    if (str.length == 1) {
        str = '0' + str;
    }

    return str;
}
</script>
<script src="<%=cdn_host%>/scpsl/js/crypto.js"></script>
</body>
</html>